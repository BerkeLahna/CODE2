import pygame

# Initialize Pygame
pygame.init()

# Constants for screen dimensions
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600

# Create the screen surface
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption('Grid System with Camera')

# Constants for grid cell size
CELL_SIZE = 80

# Camera position
camera_x = 0
camera_y = 0

# Variable to track mouse dragging
mouse_dragging = False
prev_mouse_pos = (0, 0)

# Function to handle rendering with the camera offset
def render_grid_with_camera(grid):
    for row in range(len(grid)):
        for col in range(len(grid[0])):
            cell_value = grid[row][col]
            x = col * CELL_SIZE - camera_x
            y = row * CELL_SIZE - camera_y
            pygame.draw.rect(screen, (255, 255, 255), (x, y, CELL_SIZE, CELL_SIZE), 1)

# Your grid (example)
grid = [
    [1, 1, 1, 0, 0],
    [1, 1, 1, 0, 0],
    [1, 1, 1, 0, 0],
    [0, 0, 0, 1, 1],
    [0, 0, 0, 1, 1],
    [1, 1, 1, 0, 0],
    [1, 1, 1, 0, 0],
    [1, 1, 1, 0, 0],
    [0, 0, 0, 1, 1],
    [0, 0, 0, 1, 1]
]

# Main game loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            mouse_dragging = True
        elif event.type == pygame.MOUSEBUTTONUP and event.button == 1:
            mouse_dragging = False

    # Handle mouse drag to move the camera
    if mouse_dragging:
        mouse_x, mouse_y = pygame.mouse.get_pos()
        mouse_dx = mouse_x - prev_mouse_pos[0]
        mouse_dy = mouse_y - prev_mouse_pos[1]
        camera_x -= mouse_dx
        camera_y -= mouse_dy

    prev_mouse_pos = pygame.mouse.get_pos()

    # Clear the screen
    screen.fill((0, 0, 0))

    # Render the grid with the camera offset
    render_grid_with_camera(grid)

    # Update the display
    pygame.display.flip()

# Quit Pygame
pygame.quit()
